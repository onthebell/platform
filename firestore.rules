rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(resource) {
      return request.auth.uid == resource.data.authorId;
    }
    
    function isVerifiedUser() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false; // Users can't delete their own accounts
    }

    // Community posts collection
    match /posts/{postId} {
      allow read: if true; // Public read access for all posts
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.authorId &&
                      request.resource.data.keys().hasAll(['title', 'description', 'category', 'type', 'authorId', 'authorName', 'status', 'visibility', 'createdAt', 'updatedAt', 'tags']);
      allow update: if isAuthenticated() && 
                      (isOwner(resource) || isVerifiedUser()) &&
                      request.resource.data.authorId == resource.data.authorId; // Can't change author
      allow delete: if isAuthenticated() && isOwner(resource);
    }

    // Events collection
    match /events/{eventId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.organizerId &&
                      request.resource.data.keys().hasAll(['title', 'description', 'organizerId', 'organizerName', 'startDate', 'endDate', 'location', 'status', 'visibility', 'createdAt', 'updatedAt']);
      allow update: if isAuthenticated() && 
                      (request.auth.uid == resource.data.organizerId || isVerifiedUser());
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.organizerId;
    }

    // Businesses collection  
    match /businesses/{businessId} {
      allow read: if true; // Public read access
      allow create: if isVerifiedUser() && 
                      request.auth.uid == request.resource.data.ownerId;
      allow update: if isAuthenticated() && 
                      (request.auth.uid == resource.data.ownerId || isVerifiedUser());
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }

    // Address verification collection
    match /verifications/{verificationId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if false; // Only admins can update verification status
      allow delete: if false; // Verification records are permanent
    }

    // Donations collection
    match /donations/{donationId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if false; // Donations are immutable
      allow delete: if false; // Donations are permanent records
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated(); // System can create notifications
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.authorId &&
                      request.resource.data.keys().hasAll(['postId', 'authorId', 'authorName', 'content', 'createdAt', 'updatedAt', 'isEdited']);
      allow update: if isAuthenticated() && 
                      request.auth.uid == resource.data.authorId;
      allow delete: if isAuthenticated() && 
                      (request.auth.uid == resource.data.authorId || isVerifiedUser());
    }

    // Comments subcollection for posts (legacy - keeping for backward compatibility)
    match /posts/{postId}/comments/{commentId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.authorId;
      allow update: if isAuthenticated() && 
                      request.auth.uid == resource.data.authorId;
      allow delete: if isAuthenticated() && 
                      (request.auth.uid == resource.data.authorId || isVerifiedUser());
    }

    // Event attendees subcollection
    match /events/{eventId}/attendees/{attendeeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == attendeeId;
      allow update: if isAuthenticated() && request.auth.uid == attendeeId;
      allow delete: if isAuthenticated() && request.auth.uid == attendeeId;
    }
  }
}
